@Library("Shared_lib@main") _
pipeline {
    
    agent any
    environment{
        SONAR_HOME = tool "Sonar"
    }
    
    stages {

        stage("Clean WorkSpace"){
            steps{
                echo "Cleaning Jenkins Workspace..."
                cleanWs()
            }
        }
        
        stage("Git: Code Checkout"){
            steps{
                script{
                    echo "Onboarding code..."
                    code_checkout()
                }
            }
        }
        stage("SonarQube: Analysis"){
            steps{
               script{
                   echo "Analyzing Code..."
                   sonarqube_analysis("Sonar")
               }
            }
        }
        stage("SonarQube: Quality Gates"){
            steps{
               script{
                   echo "Checking code Quality..."
                   sonarqube_code_quality()
               }
            }
        }
        stage("OWASP: Dependency Check"){
            steps{
                script{
                    echo "Checking dependency..."
                    owasp_dependency()
                }
            }
        }
        stage("Docker: Build"){
            steps{
                script{
                    echo "Building code..."
                    docker_build("node-app","v2","madhupdevops")
                }
            }
        }
        stage("Trivy: filesystem scan"){
            steps{
                script{
                    echo "Scanning file system..."
                    trivy_scan()
                }
            }
        }
        stage("Docker: Push to remote dockerhub"){
            steps{
                script{
                    echo "Pushing to DockerHub..."
                    docker_push("node-app","v2","madhupdevops")
                }
            }
        }

        stage("Docker: Cleaning Artifacts"){
            steps{
                script{
                    echo "Cleaning Artifacts..."
                    docker_cleanup("node-app","v2","madhupdevops")
                }
            }
        }
        stage("Docker-Compose: Deploy code"){
            steps{
                script{
                    docker_compose()
                }
            }
        }
    }
}
